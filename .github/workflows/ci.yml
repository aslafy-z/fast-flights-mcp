name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_DEFAULT_TIMEOUT: 100

jobs:
  # Fast linting and code quality checks
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Cache pre-commit hooks
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e .[dev,test]

      - name: Run pre-commit
        run: pre-commit run --show-diff-on-failure --color=always --all-files

  # Unit tests (optimized for Python 3.11 + Linux only)
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Cache test dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: test-deps-ubuntu-3.11-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            test-deps-ubuntu-3.11-
            test-deps-ubuntu-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e .[test]

      - name: Run unit tests
        run: pytest tests/test_server.py tests/test_bulk.py -v --cov=fast_flights_mcp --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Integration tests (optimized for Python 3.11 + Linux only)
  integration:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Cache integration test dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: integration-deps-ubuntu-3.11-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            integration-deps-ubuntu-3.11-
            integration-deps-ubuntu-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e .[test]

      - name: Run real integration tests
        run: pytest tests/test_real_integration.py -v --tb=short

      - name: Run internet API tests
        run: pytest tests/test_fast_flights_internet.py -v --tb=short -m "not slow"

      - name: Run slow internet API tests
        run: pytest tests/test_fast_flights_internet.py -v --tb=short -m "slow"

  # Build and package verification
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache build dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            build/
            dist/
          key: build-deps-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            build-deps-${{ runner.os }}-

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 7

  # Security and dependency checks
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache security tools
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: security-tools-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            security-tools-${{ runner.os }}-

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: Run bandit security check
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Run safety check
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-${{ github.sha }}
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 7

  # Performance benchmarks (optional)
  performance:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e .[test]
          pip install pytest-benchmark

      - name: Run performance tests
        run: pytest --benchmark-only --benchmark-json=benchmark.json || true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: benchmark-results-${{ github.sha }}
          path: benchmark.json
          retention-days: 30

  # Final status check
  all-checks:
    runs-on: ubuntu-latest
    needs: [lint, test, integration, build, security]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.integration.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ All checks passed!"
            exit 0
          else
            echo "❌ Some checks failed!"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Integration: ${{ needs.integration.result }}"
            echo "Build: ${{ needs.build.result }}"
            echo "Security: ${{ needs.security.result }}"
            exit 1
          fi
